/* DESIGN NOTES 

*********Java(where we will create database connectivity and control API requests)*******************

-UserCourse class that defines attribules/properties connected to
course progress( courseId, courseName, progressValue, isComplete).
This class will have the variable declarations with a constructor 
and getters and setters for these progress attributes

-Create a UserCourseDAO interface in the model package that outlines the 
method operations we want to perform on the database 
(we would likely want methods to update course progress 
and get course progress from the database)

- Create a UserCourseSQLDAO class that acts as a JDBC that 
fulfills the update and get methods from the interface.
This will contain our SQL queries

- Create a UserCourseController that will make update and get
API requests to get and update progress value in the database

-Create a test class that acts as an integration test to ensure
the UserCourseSQLDAO is actually updating and getting from the database.
******************************************************************************************************

public class UserCourse {
	private Integer courseId;
  private String courseName;
	private Integer userId;
  private int progressValue;
	private boolean isCompleted;
	
  
  public Integer getCourseId() {
		return courseId;
	}
 
  public String getCourseName() {
		return courseName;
	}
 
	public Integer getUserId() {
		return userId;
	}
   
  public int getProgressValue() {
		return progressValue;
	}
  
public void setProgressValue(int progressValue) {
		this.progressValue = progressValue;
	}

	public boolean isCompleted() {
		return isCompleted;
	}
	public void setCompleted(boolean isCompleted) {
		this.isCompleted = isCompleted;
	}

	public UserCourse() {
		
	}
	
	
	
}



public interface UserCourseDAO {

int updateProgress(Progress progressValue, int courseId);

UserCourse getProgressByCourseId(int courseId);

 }


@Component
public class UserCourseSQLDAO implements UserCourseDAO{
	private JdbcTemplate jdbcTemplate;
	
	public UserCourseSQLDAO(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

@Override
	public int updateProgress(UserCourse progressValue, int courseId) {
		String query = "UPDATE  course_progress SET progress_value = ?, is_completed = ? " + 
				" WHERE course_id = ?"
				;
		return jdbcTemplate.update(query, course.getCourseName(),course.getProgressValue(), course.isCompleted();
	}
    
  
	@Override
	UserCourse getProgressByCourseId(int courseId){
		UserCourse coarse = null;
		String query = "SELECT course_progress.*, course.course_id  FROM user_courses "+
				"JOIN users ON users.user_id = user_courses.user_id  "+
				"WHERE course_id =?";
		SqlRowSet results = this.jdbcTemplate.queryForRowSet(query, CourseId);
		if(results.next()) {
			course = this.mapRowToUserCourse(results);
		}return course;
	}

private UserCourse mapRowToUserCourses(SqlRowSet rs) {
		UserCourse course = new UserCOurse();
		course.setUserId(rs.getInt("user_id"));
	  course.setProgressValue(rs.getInt("progress"));
		course.setCompleted(rs.getBoolean("is_completed"));

		return course;	
		
	}



@RestController
@CrossOrigin()
public class UserCourseController {
	private UserCourseDAO dao;


	public UserCourseController(UserCourseDAO dao) {
		this.dao = dao;

	}

	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(path = "user/course/{userCourseId, progressValue}", method = RequestMethod.PUT)
	public void update(@RequestBody UserCourse course, @PathVariable int CourseId) throws ProfileNotFoundException {
		this.dao.updateUserCourse(progressValue);
	}
	@RequestMapping(path="user/courseId/{userCourseId, progressValue}", method = RequestMethod.GET)
	public UserCourse getProgressByCourseId( @PathVariable int CourseId) {
		 return this.dao.getProgressByCourseIdd( progressValue);
	}  





********Database(Where course, user, and progress info in stored and maintained)**********************

USERS Table             USER_COURSES Table          COURSE_PROGRESS Table
user_id| INT           user_id                     course_id
first_name| varchar    course_id                   progress_value
last_name| varchar     course_name                 is_completed

******************************************************************************************************

********HTML/CSS/VUE.JS/JAVASCRIPT(Creates the front end UI of the course progress feature)************

Here I am using a vue component for the progress bar.This would  also require a router pageto define paths as well as a service 
page that would act as a controller for the api requests on the front end

Here is a loose visual representation of my plan for the front end in vue.js

 ├── index.html
├── main.js
├── api
│   └── ... # abstractions for making API requests
├── components
│   ├── App.vue
│   └── ...
└── store
    ├── index.js 


import Vue from 'vue'
import ProgressBar from 'vue-simple-progress'

new Vue({
  components: {
    ProgressBar
  }
})


//in markup:

<div id="app">
  <progress-bar size= "big" val= "progressValue" text = "course name & progressValue"></progress-bar>
</div>

<html>
<head>
  ...
</head>
<body>
  <div id="app">
    <vue-simple-progress></vue-simple-progress>
  </div>

  <script src="path/to/vue.js"></script>
  <script src="path/to/vue-simple-progress.js"></script>
  <script>
    new Vue({
      el: '#app'
    })
  </script>
</body>
</html>


*******************************************************************************************************


This plan is very rough and I would have like to included more, but I really wanted to try and demonstrate my knowledge and understanding of application design
and that I understand what needs to be done to have a feature work from front to back. Over time I hope to grow in my skills of execution as a junior developer
with your team. Thanks again!


*/
